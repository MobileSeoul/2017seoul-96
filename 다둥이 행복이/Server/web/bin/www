#!/usr/bin/env node

/**
 * 모듈 의존성주입
 */
console.log("의존성 주입");
var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');
/**
 * 포트설정
 */
console.log("포트설정");
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log("포트: "+ port);

/**
 * HTTP 서버 생성
 */
console.log("서버생성");
var server = http.createServer(app);

/**
 * 해당포트에서 요청대기
 */
console.log("포트에서 요청대기");
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * 포트를 경우에 맞게 number, string, or false 형태로 지정.
 */

function normalizePort(val) {
  console.log("포트 데이터타입 지정");
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * HTTP 서버에 대한 오류 핸들링.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 오류 메세지 출력
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * HTTP 이벤트 리스너의 이벤트
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
